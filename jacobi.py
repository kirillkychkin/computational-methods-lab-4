# исходные данные
A = [[5, 2, -1], [-4, 8, 3], [2, -2, 5]]
b = [12, 24, 9]

from convergence import isDiagDominant
'''
В СЛАУ вида:
a11 * x1 + a12 * x2 + a13 * x3 = b1
a21 * x1 + a22 * x2 + a23 * x3 = b2
a31 * x1 + a32 * x2 + a33 * x3 = b3
....
решения уравнений можно выразить следующим образом:
x1 = (1 / a11) * (b1 - a12 * x2 - a13 * x3)
x2 = (1 / a22) * (b2 - a21 * x1 - a23 * x3)
x3 = (1 / a33) * (b3 - a31 * x1 - a32 * x2)
....

тогда формулы для метода якоби:
x1 ^(k + 1) = (1 / a11) * (b1 - a12 * x2 ^ (k) - a13 * x3 ^ (k))
x2 ^(k + 1) = (1 / a22) * (b2 - a21 * x1 ^ (k) - a23 * x3 ^ (k))
x3 ^(k + 1) = (1 / a33) * (b3 - a31 * x1 ^ (k) - a32 * x2 ^ (k))
.....
k - метод итерации
'''

if(isDiagDominant(A)):
    print("+")
else:
    print("Метод Якоби может не сходиться, матрица не имеет строчного диагонального преобладания")
#29:07
# eps - точность, которую хотим получить
def jacobi(A, b, eps = 0.1):
    # первичные значения, с которых начинаем вычисления
    start = [0] * len(A)